# Dockerfile.backend

# Use an official Python runtime as a parent image
FROM python:3.13-slim-bullseye as builder

# Set the working directory in the container
# All subsequent commands will be executed relative to this directory
WORKDIR /app/card_catalog_service

# Copy the requirements file into the container's working directory
COPY card_catalog_service/requirements.txt .

# Install any needed packages specified in requirements.txt
# --no-cache-dir: Prevents pip from storing cache, reducing image size
# --upgrade pip: Ensures pip is up-to-date
RUN pip install --no-cache-dir --upgrade pip && \
    pip install -r requirements.txt

# Copy the entire Flask application code into the container
# The first 'card_catalog_service/' is relative to the Docker build context (root of mtg-app-project)
# The second 'card_catalog_service/' is the destination inside the container's /app directory
COPY card_catalog_service/ .

# Expose the port that the Flask application will run on
EXPOSE 5000

# Define environment variables for Flask (optional, but good practice for clarity)
ENV FLASK_APP=app.py
ENV FLASK_RUN_HOST=0.0.0.0
ENV FLASK_RUN_PORT=5000

# Command to run the application using Gunicorn (a production-ready WSGI server)
# Gunicorn is more robust and performant than Flask's built-in development server.
# You'll need to add gunicorn to your requirements.txt if you haven't already.
# If you prefer to stick to Flask's dev server for homelab simplicity,
# you can use: CMD ["python", "app.py"]
CMD ["python", "app.py"]